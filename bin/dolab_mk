#!/bin/bash

#
# This script create interacly a docker lab (network + shared volume + containers)
#

function askPassword {

	if [ -n "${LAB_PASSWORD}" ] ; then
		return
	fi

	while true
	do 	
		while [ -z "${LAB_PASSWORD}" ] 
		do
			read -p "password of ${LAB_USERNAMES}: " -s LAB_PASSWORD
			echo "" 	
		done

		while [ -z "${vConfirmPassword}" ] 
		do
			read -p "Confirm password: " -s vConfirmPassword
			echo "" 	
		done
		
		if [ "${LAB_PASSWORD}" = "${vConfirmPassword}" ] ; then
			return

		else 
			echo "ERROR passwords doesn't match!!!"
		fi
		unset LAB_PASSWORD vConfirmPassword	
	done

}

function checkParameters {


        while [ -z "${LAB_NAME}" ]
        do
                read -p "Lab Name: " LAB_NAME
        done

        while [ -z "${LAB_STARTINGPORT}" ]
        do
                read -e -i 22220 -p "Starting port: " LAB_STARTINGPORT
	done 

        while [ -z "${LAB_ADDPROXY}" ]
        do
                read -e -i n -p "Add proxy container on starting port (y/n): " LAB_ADDPROXY
        done

        while [ -z "${LAB_CONTAINERS}" ]
        do
                read -e -i 1 -p "Number of mysinmyc/centos7ssh containers (0=skip): " LAB_CONTAINERS
        done

        if [ "${LAB_CONTAINERS}" -eq 0 ] ; then
                return
        fi

        while [ -z "${LAB_USERNAMES}" ]
        do
                read -e -i admin -p "Users to define inside the container (separated by,): " LAB_USERNAMES
        done

        askPassword
}



function createNetwork {

	[ -z "${LAB_NETWORK}" ] && LAB_NETWORK="${LAB_NAME}net"
	
	echo "Creating network ${LAB_NETWORK} ..."
	docker network create --label "LAB=${LAB_NAME}" ${LAB_NETWORK}
}



function connectDefaultContainers {

	echo "Connecting default containers to ${LAB_NETWORK}..."

	docker ps -a -q --filter "label=LAB=default" | while read vCurId
	do 
		docker inspect --format "{{.Name}},{{.Config.Hostname}}" ${vCurId} | while IFS=, read vCurName vCurHostname
		do
			vCurAlias=${vCurHostname}.${LAB_NETWORK}
			echo " - Connecting ${vCurName} as ${vCurAlias} ..."
			docker network connect --alias ${vCurAlias} ${LAB_NETWORK} ${vCurId}
		done
	done
}



function createSharedVolume {

	[ -z "${LAB_SHAREDVOLUME}" ] && LAB_SHAREDVOLUME="${LAB_NAME}shared"
	
	echo "Creating shared volume ${LAB_SHAREDVOLUME} ..."
	docker volume create --label "LAB=${LAB_NAME}" --name ${LAB_SHAREDVOLUME}
}



function runProxy {
	if [ ! "${LAB_ADDPROXY}" = "y" ] ; then
		return
	fi
	echo "Running proxy container on port ${LAB_STARTINGPORT}..."
	docker run --label "LAB=${LAB_NAME}" -d -p ${LAB_STARTINGPORT}:3128 --net ${LAB_NETWORK} --name ${LAB_NAME}proxy mysinmyc/squid
	
}



function runContainers {

	[ -z "${IMAGE}" ] && IMAGE=mysinmyc/centos7ssh
	[ -z "${LAB_STARTINGPORT}" ] && LAB_STARTINGPORT=20000
	[ -z "${LAB_CONTAINERS}" ] && LAB_CONTAINERS=1
	[ -z "${DOCKERRUN_OPTS}" ] && DOCKERRUN_OPTS="-e ADDUSERS_NAMES=${LAB_USERNAMES} -e ADDUSERS_PASSWORD=${LAB_PASSWORD}"
	
	if [ "${LAB_CONTAINERS}" -eq 0 ] ; then
		return
	fi

	for vCnt in $(seq 1 ${LAB_CONTAINERS} ) 
	do
		vCurContainerName=${LAB_NAME}host${vCnt}
		vCurContainerSshPort=$(( ${LAB_STARTINGPORT} + $vCnt ))
		echo "Creating container ${vCnt}/${LAB_CONTAINERS} name:${vCurContainerName} sshport:${vCurContainerSshPort}..."
		docker run --label "LAB=${LAB_NAME}" -d -p ${vCurContainerSshPort}:22 --net ${LAB_NETWORK} -v ${LAB_SHAREDVOLUME}:/shared --name ${vCurContainerName} --network-alias ${vCurContainerName}.${LAB_NETWORK} --hostname ${vCurContainerName} ${DOCKERRUN_OPTS} ${IMAGE}
	done
	
}



checkParameters $*

echo "Press ENTER to start"
read

echo "Started creation of lab ${LAB_NAME}..."

createNetwork
connectDefaultContainers
createSharedVolume
runProxy
runContainers

echo "Creation completed"
